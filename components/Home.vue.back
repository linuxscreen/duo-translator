<script lang="ts">

import {sendMessageToBackground, sendMessageToTab} from "@/entrypoints/utils";
import {
  COMMON,
  DB_ACTION,
  DEFAULT,
  DOMAIN_STRATEGY,
  LANG_CODE,
  NONE, STORAGE_ACTION,
  TB_ACTION, TRANS_ACTION,
  TRANS_SERVICE,
  VIEW_STRATEGY
} from "@/entrypoints/constants";
import useI18n from "@/composables/useI18n";
import {browser} from "wxt/browser";


// import {LANGUAGES} from "cld";

// document.getElementById("ruleView")?.addEventListener('click', () => {
//   console.log("click ruleView")
//   activateSelection()
// if (isActive) {
//   deactivateSelection();
// } else {
//   activateSelection();
// }

// let urlStorage = await UrlStorage.getInstance()
export default {

  setup() {
    const {t} = useI18n();
    // const domain = await sendMessageToBackground({action: TB_ACTION.TAB_DOMAIN_GET})
    return {
      t
      // ,domain
    };
  },
  data: () => ({
    sourceLanguage: undefined,
    tabLanguage: undefined,
    tabs: undefined,
    tabTranslateStatus: "translate",
    domain: "",
    message: '',
    // items: urlStorage.searchAll(),
    //翻译状态

    //域名策略
    domainStrategies: [
      // {title: "default", value: NONE},
      {title: "automaticallyDetermineWhetherToTranslateThisSite", value: DOMAIN_STRATEGY.AUTO},
      {title: "neverTranslateThisSite", value: DOMAIN_STRATEGY.NEVER},
      {title: "alwaysTranslateThisSite", value: DOMAIN_STRATEGY.ALWAYS},
      // {title: "alwaysAskToTranslateThisSite", value: DOMAIN_STRATEGY.ASK},
      // {title: "translateAllNotTargetLanguageContent", value: DOMAIN_STRATEGY.NON_TARGET},
    ],
    //显示策略
    viewStrategies: [
      // {title: "default", value: NONE},
      {title: "displayBilingual", value: VIEW_STRATEGY.DOUBLE, action: TRANS_ACTION.DOUBLE},
      {title: "showTranslation", value: VIEW_STRATEGY.SINGLE, action: TRANS_ACTION.SINGLE},
      {title: "showToggleButton", value: VIEW_STRATEGY.BUTTON, action: TRANS_ACTION.TOGGLE},
    ],
    //翻译服务
    translateServices: [
      {title: "default", value: DEFAULT},
      {title: "googleTranslator", value: TRANS_SERVICE.GOOGLE},
      {title: "microsoftTranslator", value: TRANS_SERVICE.MICROSOFT},
      {title: "youdaoTranslator", value: TRANS_SERVICE.YOUDAO},
    ],
    //目标语言
    targetLanguages: [
      {title: "simplifiedChinese", value: LANG_CODE.ZH_CN},
      {title: "traditionalChinese", value: LANG_CODE.ZH_TW},
      {title: "english", value: LANG_CODE.EN},
      {title: "french", value: LANG_CODE.FR},
      {title: "german", value: LANG_CODE.DE},
      {title: "japanese", value: LANG_CODE.JA},
    ],
    //源语言
    sourceLanguages: [
      {title: "automaticDetection", value: COMMON.AUTO},
      {title: "simplifiedChinese", value: LANG_CODE.ZH_CN},
      {title: "traditionalChinese", value: LANG_CODE.ZH_TW},
      {title: "english", value: LANG_CODE.EN},
      {title: "french", value: LANG_CODE.FR},
      {title: "german", value: LANG_CODE.DE},
      {title: "japanese", value: LANG_CODE.JA},
    ],
    strategySelectedTitle: "automaticallyDetermineWhetherToTranslateThisSite",
    viewStrategySelectedTitle: "displayBilingual",
    selected: "default",
    targetLanguageSelected: "simplifiedChinese",
    translateServiceSelected: "googleTranslator",
    sourceLanguageSelected: "automaticDetection",
    switchAlwaysTranslate: false,
    switchNeverTranslate: false,
    switchAutoDetect: false,
    localStorageValue: undefined,
  }),

  watch: {
    switchAlwaysTranslate(newVal) {
      this.switchAlwaysTranslateChanged(newVal);
    },
  },

  computed: {},
  beforeDestroy() {
    // 移除 storage 事件监听
    window.removeEventListener('storage', this.onStorageChange);
  },
  async created() {
  },
  async mounted() {
    // 获取偏好的目标语言
    try {
      let targetLanguageConfigValue = await sendMessageToBackground({
        action: DB_ACTION.CONFIG_GET,
        data: {name: "targetLanguage"}
      });
      if (targetLanguageConfigValue) {
        // 根据code获取title 设置前端显示
        this.targetLanguages.forEach(language => {
          if (language.value == targetLanguageConfigValue) {
            this.targetLanguageSelected = language.title;
          }
        })
      } else {
        this.targetLanguages.forEach(language => {
          // get default browser language
          if (language.value == navigator.language) {
            this.targetLanguageSelected = language.title;
          }
        })
      }
      this.tabLanguage = await sendMessageToBackground({action: TB_ACTION.TAB_LANG_GET});
      //获取偏好的源语言
      // let sourceLanguageConfigValue = await sendMessageToBackground({
      //   action: DB_ACTION.CONFIG_GET,
      //   data: {name: "sourceLanguageSelected"}
      // });
      // if (sourceLanguageConfigValue && sourceLanguageConfigValue != COMMON.AUTO) {
      //   this.sourceLanguageSelected = this.getItemByValue(this.sourceLanguages, sourceLanguageConfigValue)?.title;
      //   this.sourceLanguage = sourceLanguageConfigValue;
      // } else {
      //   // get tab default language
      //   this.sourceLanguage = this.tabLanguage
      // }
      // 获取偏好的翻译服务
      let translateServiceConfigValue = await sendMessageToBackground({
        action: DB_ACTION.CONFIG_GET,
        data: {name: "translateService"}
      });
      if (translateServiceConfigValue) {
        this.translateServiceSelected = this.getItemByValue(this.translateServices, translateServiceConfigValue)?.title;
      }
      //获取当前活动的tab
      this.tabs = await browser.tabs.query({active: true, currentWindow: true})
      console.log(this.tabs)
      //页面翻译状态
      let status = await sendMessageToBackground({
        action: STORAGE_ACTION.SESSION_GET,
        data: {key: "tabTranslateStatus#" + this.tabs[0].id}
      })
      console.log("status", status)
      if (status) {
        this.tabTranslateStatus = status
      } else {
        this.tabTranslateStatus = "translate"
      }
      // 获取当前域名的翻译策略
      this.domain = await sendMessageToBackground({action: TB_ACTION.TAB_DOMAIN_GET});
      let domainData = await sendMessageToBackground({action: DB_ACTION.DOMAIN_GET, data: {domain: this.domain}});
      if (domainData) {
        //根据strategy value获取title
        this.domainStrategies.forEach(strategy => {
          if (strategy.value == domainData.strategy) {
            this.strategySelectedTitle = strategy.title;
          }
        })
        this.viewStrategies.forEach((vs) => {
          if (vs.value == domainData.viewStrategy) {
            this.viewStrategySelectedTitle = vs.title;
          }
        })
        // this.strategySelectedTitle = domain.strategy;
      }
    } catch (e) {
      console.log(e)
    }

  },

  methods: {
    async test() {
      let key = "tabTranslateStatus#" + this.tabs[0].id
      let data = await sendMessageToBackground({action: "getSessionStorage", data: {key: key}})
      console.log("key: ", key, "data: ", data)
    },
    // onStorageChange(event) {
    //   if (event.key === 'myKey') {
    //     this.localStorageValue = event.newValue;
    //   }
    // },
    // updateLocalStorage() {
    //   localStorage.setItem('myKey', this.newValue);
    //   this.localStorageValue = this.newValue; // 手动更新以同步当前窗口中的变化
    // },
    changeSourceLanguage(item) {
      this.sourceLanguageSelected = item.title
      // 保存到数据库
      sendMessageToBackground({
        action: DB_ACTION.CONFIG_SET,
        data: {name: "sourceLanguageSelected", value: item.value}
      })

    },
    toggleSelectionMode() {
      sendMessageToTab({action: "toggleSelectionMode"})
      window.close()
    },
    changeTargetLanguages(item) {
      this.targetLanguageSelected = item.title
      // 保存到数据库
      sendMessageToBackground({
        action: DB_ACTION.CONFIG_SET,
        data: {name: "targetLanguage", value: item.value}
      })
    },
    getItemByTitle(array: Array<any>, title: string) {
      return array.find(value => value.title == title)
    },
    getItemByValue(array: Array<any>, code: string) {
      return array.find(value => value.value == code)
    },
    async toggleTranslation() {
      if (this.tabTranslateStatus == "translate") {
        // get the translation strategy
        // 当前页面进行翻译
        // 获取当前活动的tabId
        // sendMessageToTab({action: TRANS_ACTION.DOUBLE})
        //储存翻译状态
        await sendMessageToBackground({
          action: STORAGE_ACTION.SESSION_SET,
          data: {key: "tabTranslateStatus#" + this.tabs[0].id, value: "showOriginal"}
        })
        // browser.tabs.query({active:true, currentWindow:true}).then(res=>console.log(res))
        // 向content script发送消息,执行特定的翻译行为
        let action = this.viewStrategies.find(value => value.title == this.viewStrategySelectedTitle)?.action
        // browser.tabs.sendMessage(this.tabs[0].id, {action: action });
        await sendMessageToTab({
          action: action,
          data: {
            targetLanguage: this.getItemByTitle(this.targetLanguages, this.targetLanguageSelected)?.value,
            sourceLanguage: undefined,
            translateService: this.getItemByTitle(this.translateServices, this.translateServiceSelected)?.value
          }
        })
        // sendMessageToBackground({action: TRANS_ACTION.DOUBLE})
        //关闭popup
        // window.close()
        this.tabTranslateStatus = "showOriginal"
      } else {
        await sendMessageToTab({action: TRANS_ACTION.ORIGIN})
        await sendMessageToBackground({
          action: STORAGE_ACTION.SESSION_SET,
          data: {key: "tabTranslateStatus#" + this.tabs[0].id, value: "translate"}
        })
        // sendMessageToBackground({action: TRANS_ACTION.DOUBLE})
        this.tabTranslateStatus = "translate"
      }
    },
    async changeTranslateServiceSelected(selected) {
      //保存到数据库
      await sendMessageToBackground({
        action: DB_ACTION.CONFIG_SET,
        data: {name: "translateService", value: selected.value}
      })
      this.translateServiceSelected = selected.title
    },
    changeViewStrategy(select) {
      // 获取到域名,然后保存策略到数据库
      sendMessageToBackground({
        action: DB_ACTION.DOMAIN_UPDATE,
        data: {domain: this.domain, viewStrategy: select.value}
      }).then((response) => {
        //修改前端显示的策略
        this.viewStrategySelectedTitle = select.title;
      }).catch(
          // 上传报错信息
      )
    }
    ,
    changeTranslateStrategy(select) {
      // 获取到域名,然后保存策略到数据库
      sendMessageToBackground({
        action: DB_ACTION.DOMAIN_UPDATE,
        data: {domain: this.domain, strategy: select.value}
      }).then((response) => {
        //修改前端显示的策略
        if (response) {
          this.strategySelectedTitle = select.title;
        }
      })
    }
    ,
    switchAlwaysTranslateChanged(newVal) {
      console.log("Switch value changed to: ", newVal);
      if (newVal) {
        //获取当前页面的域名
        sendMessageToBackground({action: "getTabLanguage", data: null}).then((response) => {
          console.log("response", response)
          // if (response){
          //   //保存到数据库
          //   // urlStorage.add(response)
          //   // this.items = urlStorage.searchAll()
          // }
        })
      }
      // 在这里执行你的函数
    }
    ,
    selectItem(item: any) {
      this.selected = item.title
    },
    highlightElement(event: MouseEvent
    ) {
      console.log("document")
      const target = event.target as HTMLElement;
      target.style.outline = '2px solid red';
      target.style.outlineOffset = '2px';
    }
    ,
    activateSelection(): void {
      console.log("active")
      document.body.addEventListener('mouseover', this.highlightElement);
      // if (!isActive) {
      //   document.body.addEventListener('mouseover', highlightElement);
      //   document.body.addEventListener('mouseout', unhighlightElement);
      //   document.body.addEventListener('contextmenu', copySelector, true);
      //   isActive = true;
      // }
    },
    // deleteUrl(index: number) {
    //   let url = this.items.at(index)
    //   urlStorage.delete(<string>url)
    //   this.items.splice(index, 1)
    // },
    // // 判断字符串是否为合法的域名格式，不需要http或者https开头
    // isUrl(url: string) {
    //   const domainRegex = /^(?!-)(?:[a-zA-Z\d-]{0,62}[a-zA-Z\d]\.){1,126}(?!d{1,3}\.)([a-zA-Z\d]{1,63})(?<!-)$/;
    //   let reg = new RegExp(domainRegex);
    //   return reg.test(url)
    // },
    // saveUrl() {
    //   if (!this.isUrl(this.message)) {
    //     alert('请输入正确的网址')
    //     return
    //   }
    //   this.items.push(this.message)
    //   urlStorage.add(this.message)
    //   this.clearUrl()
    // },
    // clearUrl() {
    //   this.message = ''
    //   this.items = urlStorage.searchAll()
    // },
    // search() {
    //   this.items = urlStorage.search(this.message)
    // },
  },
}
</script>
<template>
  <v-btn @click="test">test</v-btn>
  <v-form>
    <v-container>
      <v-row>
        <!--        <v-col cols="12">-->
        <!--          <v-text-field-->
        <!--              v-model="message"-->
        <!--              append-icon="mdi-plus-box"-->
        <!--              prepend-icon="mdi-magnify"-->
        <!--              clear-icon="mdi-close-circle"-->
        <!--              label="https://"-->
        <!--              type="text"-->
        <!--              variant="filled"-->
        <!--              clearable-->
        <!--              @click:append="saveUrl"-->
        <!--              @click:clear="clearUrl"-->
        <!--              @click:prepend="search"-->
        <!--          ></v-text-field>-->
        <!--        </v-col>-->
      </v-row>
      <!--      <v-list dense>-->
      <!--        <v-list-item-->
      <!--            v-for="(item, index) in items"-->
      <!--            :key="index"-->
      <!--            class="pa-2"-->
      <!--        >-->
      <!--          <v-list-item-content>-->
      <!--            <v-list-item-subtitle>{{ item }}</v-list-item-subtitle>-->
      <!--          </v-list-item-content>-->

      <!--          <v-list-item-action>-->
      <!--            <v-btn icon @click="deleteUrl(index)">-->
      <!--              <v-icon>mdi-delete</v-icon>-->
      <!--            </v-btn>-->
      <!--          </v-list-item-action>-->
      <!--        </v-list-item>-->
      <!--      </v-list>-->
    </v-container>
  </v-form>
  <v-btn @click="toggleSelectionMode">规则视图</v-btn>

  <v-container>
    <v-row>
      <v-col>
        <v-menu>
          <template v-slot:activator="{ props }">
            <!--            <v-btn-->
            <!--                color="primary"-->
            <!--                v-bind="props"-->
            <!--            >-->
            <!--              {{ t(sourceLanguageSelected) }}-->
            <!--              <br></br>{{ t("sourceLanguage") }}-->
            <!--            </v-btn>-->
          </template>
          <v-list>
            <v-list-item
                v-for="(item, index) in sourceLanguages"
                :key="index"
                :value="index"
                @click="changeSourceLanguage(item)"
            >
              <v-list-item-title>{{ t(item.title) }}</v-list-item-title>
            </v-list-item>
          </v-list>
        </v-menu>
      </v-col>
      <v-spacer></v-spacer>
      <v-col>
        <v-menu>
          <template v-slot:activator="{ props }">
            <v-btn
                color="primary"
                v-bind="props"
            >
              {{ t(targetLanguageSelected) }}
              <br></br>{{ t("targetLanguage") }}
            </v-btn>
          </template>
          <v-list>
            <v-list-item
                v-for="(item, index) in targetLanguages"
                :key="index"
                :value="index"
                @click="changeTargetLanguages(item)"
            >
              <v-list-item-title>{{ t(item.title) }}</v-list-item-title>
            </v-list-item>
          </v-list>
        </v-menu>
      </v-col>
    </v-row>
    <v-row justify="center">
      <v-menu>
        <template v-slot:activator="{ props }">
          <v-btn
              color="primary"
              v-bind="props"
          >
            {{ t(translateServiceSelected) }}
            <br></br>翻译服务
          </v-btn>
        </template>
        <v-list>
          <v-list-item
              v-for="(item, index) in translateServices"
              :key="index"
              :value="index"
              @click="changeTranslateServiceSelected(item)"
          >
            <v-list-item-title>{{ item.title }}</v-list-item-title>
          </v-list-item>
        </v-list>
      </v-menu>
    </v-row>
    <v-row>
      <v-menu>
        <!--        翻译策略-->
        <template v-slot:activator="{ props }">
          <v-btn
              color="primary"
              v-bind="props"
          >
            {{ t(strategySelectedTitle) }}
            <br></br>{{ t("translateStrategy") }}
          </v-btn>
        </template>
        <v-list>
          <v-list-item
              v-for="(item, index) in domainStrategies"
              :key="index"
              :value="index"
              @click="changeTranslateStrategy(item)"
          >
            <v-list-item-title>{{ t(item.title) }}</v-list-item-title>
          </v-list-item>
        </v-list>
      </v-menu>
    </v-row>
    <v-row>
      <v-menu>
        <template v-slot:activator="{ props }">
          <v-btn
              color="primary"
              v-bind="props"
          >
            {{ t(viewStrategySelectedTitle) }}
            <br></br>{{ t("viewStrategy") }}
          </v-btn>
        </template>
        <v-list>
          <v-list-item
              v-for="(item, index) in viewStrategies"
              :key="index"
              :value="index"
              @click="changeViewStrategy(item)"
          >
            <v-list-item-title>{{ t(item.title) }}</v-list-item-title>
          </v-list-item>
        </v-list>
      </v-menu>
    </v-row>
    <v-row>
      <v-btn
          @click="toggleTranslation()"
      >
        {{ t(tabTranslateStatus) }}
      </v-btn>
    </v-row>
  </v-container>


</template>

<style scoped>
.read-the-docs {
  color: #888;
}

.v-list {
  max-height: 300px; /* Adjust based on your needs */
  overflow-y: auto;
}
</style>
